from fastapi import FastAPI, Depends, HTTPException, status, Response, UploadFile, File, Request
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.responses import StreamingResponse
import numpy as np
import pandas as pd
from urllib.parse import quote
from io import BytesIO
from sqlalchemy.orm import Session
from sqlalchemy import or_
from typing import List, Optional
import models
from database import engine, SessionLocal
from schemas import AssetResponse, AssetCreate, AssetUpdate, UserLogin, UserCreate, UserResponse
from crud import get_asset, get_assets, create_asset, update_asset, delete_asset

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
models.Base.metadata.create_all(bind=engine)

app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CORS
from fastapi.middleware.cors import CORSMiddleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ö–µ–º–∞ OAuth2 –¥–ª—è —Ç–æ–∫–µ–Ω–∞
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")

# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def clean_value(val):
    if pd.isna(val) or val is None:
        return None
    return str(val).strip()

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
fake_users_db = {
    "admin": {"username": "admin", "password": "secret", "is_admin": True},
}

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user_dict = fake_users_db.get(form_data.username)
    if not user_dict or user_dict["password"] != form_data.password:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return {"access_token": f"token_{form_data.username}", "token_type": "bearer"}

@app.get("/users/me", response_model=UserResponse)
async def read_users_me(token: str = Depends(oauth2_scheme)):
    username = token.replace("token_", "", 1)
    user_dict = fake_users_db.get(username)
    if not user_dict:
        raise HTTPException(status_code=401, detail="–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return UserResponse(id=1, username=user_dict["username"], is_admin=user_dict["is_admin"])
# –†–æ—É—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤

# üîç –í—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å
@app.get("/assets/", response_model=List[AssetResponse])
def read_assets(skip: int = 0, limit: int = 5000, db: Session = Depends(get_db)):
    return get_assets(db, skip=skip, limit=limit)

@app.get("/assets/{asset_id}", response_model=AssetResponse)
def read_asset(asset_id: int, db: Session = Depends(get_db)):
    db_asset = get_asset(db, asset_id=asset_id)
    if not db_asset:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_asset

# ‚úèÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å
@app.post("/assets/", response_model=AssetResponse, status_code=201)
def create_new_asset(asset: AssetCreate, db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    username = token.replace("token_", "", 1)
    if username not in fake_users_db or not fake_users_db[username]["is_admin"]:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")
    return create_asset(db=db, asset=asset)

# üìù –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@app.put("/assets/{asset_id}", response_model=AssetResponse)
def update_existing_asset(asset_id: int, asset_update: AssetUpdate, db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    username = token.replace("token_", "", 1)
    if username not in fake_users_db or not fake_users_db[username]["is_admin"]:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    updated = update_asset(db, asset_id, asset_update)
    if not updated:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return updated

# ‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å
@app.delete("/assets/{asset_id}")
def delete_existing_asset(asset_id: int, db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    username = token.replace("token_", "", 1)
    if username not in fake_users_db or not fake_users_db[username]["is_admin"]:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
    deleted = delete_asset(db, asset_id)
    if not deleted:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"detail": "–ê–∫—Ç–∏–≤ —É–¥–∞–ª–µ–Ω"}

# –≠–∫—Å–ø–æ—Ä—Ç –≤ —ç–∫—Å–µ–ª—å
@app.get("/export/excel")
def export_to_excel(
    type: Optional[str] = None,
    q: Optional[str] = None,
    db: Session = Depends(get_db)
):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    query = db.query(models.Asset)
    if type and type in ["–ú–æ–Ω–∏—Ç–æ—Ä", "–ö–æ–º–ø—å—é—Ç–µ—Ä", "–ù–æ—É—Ç–±—É–∫", "–ü—Ä–æ—á–µ–µ"]:
        query = query.filter(models.Asset.type == type)
    if q:
        search = f"%{q}%"
        query = query.filter(
            or_(
                models.Asset.inventory_number.ilike(search),
                models.Asset.serial_number.ilike(search),
                models.Asset.model.ilike(search),
                models.Asset.location.ilike(search),
                models.Asset.user_name.ilike(search),
                models.Asset.comment.ilike(search),
            )
        )

    assets = query.all()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–æ–≤
    asset_data = []
    # –î–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    history_data = []

    for asset in assets:
        asset_data.append({
            "ID": asset.id,
            "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä": asset.inventory_number,
            "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä": asset.serial_number,
            "–ú–æ–¥–µ–ª—å": asset.model,
            "–¢–∏–ø": asset.type,
            "–°—Ç–∞—Ç—É—Å": asset.status,
            "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ": asset.location,
            "–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": asset.user_name,
            "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏": asset.issue_date,
            "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏": asset.purchase_date,
            "–ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ": asset.warranty_until,
            "–ú–∞—Ç. –ø–ª–∞—Ç–∞": asset.motherboard,
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä": asset.processor,
            "–û–ó–£": asset.ram,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": asset.comment,
  	    "–ö–ª—é—á Windows": asset.windows_key,
            "–¢–∏–ø –û–°": asset.os_type
        })

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        for h in asset.history:
            history_data.append({
                "Asset ID": asset.id,
                "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä": asset.inventory_number,
                "–ü–æ–ª–µ": h.field,
                "–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": h.old_value,
                "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": h.new_value,
                "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è": h.changed_at
            })

    # –°–æ–∑–¥–∞—ë–º Excel —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        pd.DataFrame(asset_data).to_excel(writer, index=False, sheet_name="–ê–∫—Ç–∏–≤—ã")
        if history_data:
            pd.DataFrame(history_data).to_excel(writer, index=False, sheet_name="–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            pd.DataFrame(columns=["Asset ID", "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä", "–ü–æ–ª–µ", "–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"]).to_excel(
                writer, index=False, sheet_name="–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            )

    buffer.seek(0)

    filename = "–∞–∫—Ç–∏–≤—ã_—Å_–∏—Å—Ç–æ—Ä–∏–µ–π.xlsx"
    encoded_filename = quote(filename)

    return StreamingResponse(
        buffer,
        media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        headers={"Content-Disposition": f"attachment; filename*=UTF-8''{encoded_filename}"}
    )

#–ò–º–ø–æ—Ä—Ç –∏–∑ —ç–∫—Å–µ–ª—è
@app.post("/import/excel")
def import_from_excel(file: UploadFile = File(...), db: Session = Depends(get_db)):
    if not file.filename.endswith('.xlsx'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")

    try:
        contents = file.file.read()
        df_assets = pd.read_excel(BytesIO(contents), sheet_name="–ê–∫—Ç–∏–≤—ã")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç "–ò—Å—Ç–æ—Ä–∏—è"
        try:
            df_history = pd.read_excel(BytesIO(contents), sheet_name="–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            has_history = True
        except:
            has_history = False
            df_history = pd.DataFrame()
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    imported = 0
    errors = []

    # –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã
    for index, row in df_assets.iterrows():
        try:
            inv_num = str(row["–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä"]).strip()
            location = str(row["–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"]).strip()
            asset_type = str(row["–¢–∏–ø"]).strip()

            if not inv_num or not location or not asset_type:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2}: –ø—É—Å—Ç–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
                continue

            data = {
                "inventory_number": clean_value(row.get("–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")),
    		"serial_number": clean_value(row.get("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")),
    		"model": clean_value(row.get("–ú–æ–¥–µ–ª—å")),
    		"type": clean_value(row.get("–¢–∏–ø")) or "–ö–æ–º–ø—å—é—Ç–µ—Ä",
    		"status": clean_value(row.get("–°—Ç–∞—Ç—É—Å")) or "–≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏",
    		"location": clean_value(row.get("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ")),
    		"user_name": clean_value(row.get("–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")),
    		"issue_date": pd.to_datetime(row.get("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏")).date() if pd.notna(row.get("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏")) else None,
    		"purchase_date": pd.to_datetime(row.get("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏")).date() if pd.notna(row.get("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏")) else None,
    		"warranty_until": pd.to_datetime(row.get("–ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ")).date() if pd.notna(row.get("–ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ")) else None,
    		"motherboard": clean_value(row.get("–ú–∞—Ç. –ø–ª–∞—Ç–∞")),
    		"processor": clean_value(row.get("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä")),
    		"ram": clean_value(row.get("–û–ó–£")),
    		"comment": clean_value(row.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")),
    		"windows_key": clean_value(row.get("–ö–ª—é—á Windows")),
    		"os_type": clean_value(row.get("–¢–∏–ø –û–°"))
            }
            existing = db.query(models.Asset).filter(models.Asset.inventory_number == inv_num).first()

            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º
                for k, v in data.items():
                    setattr(existing, k, v)
                db_asset = existing
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
                db_asset = models.Asset(**data)
                db.add(db_asset)

            db.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID

            imported += 1
        except Exception as e:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2} (–∞–∫—Ç–∏–≤): {str(e)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
    db.commit()

    # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if has_history and not df_history.empty:
        for index, row in df_history.iterrows():
            try:
                inv_num = str(row["–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä"]).strip()
                asset = db.query(models.Asset).filter(models.Asset.inventory_number == inv_num).first()
                if not asset:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2} (–∏—Å—Ç–æ—Ä–∏—è): –∞–∫—Ç–∏–≤ —Å –∏–Ω–≤. –Ω–æ–º–µ—Ä–æ–º {inv_num} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue

                history_data = {
                    "asset_id": asset.id,
                    "field": str(row["–ü–æ–ª–µ"]).strip(),
                    "old_value": str(row["–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"]).strip() or None,
                    "new_value": str(row["–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"]).strip() or None,
                    "changed_at": pd.to_datetime(row["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"]).date()
                }

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏
                existing_history = db.query(models.AssetHistory).filter(
                    models.AssetHistory.asset_id == asset.id,
                    models.AssetHistory.field == history_data["field"],
                    models.AssetHistory.old_value == history_data["old_value"],
                    models.AssetHistory.new_value == history_data["new_value"],
                    models.AssetHistory.changed_at == history_data["changed_at"]
                ).first()

                if not existing_history:
                    history = models.AssetHistory(**history_data)
                    db.add(history)
            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2} (–∏—Å—Ç–æ—Ä–∏—è): {str(e)}")

    db.commit()

    return {
        "detail": f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {imported} –∞–∫—Ç–∏–≤–æ–≤",
        "errors": errors
    }

@app.post("/admin/clear-db")
def clear_database(request: Request, db: Session = Depends(get_db)):
    auth = request.headers.get("Authorization")
    if not auth or not auth.startswith("Bearer "):
        raise HTTPException(status_code=403, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

    token = auth.split(" ")[1]
    username = token.replace("token_", "", 1)
    if username not in fake_users_db or not fake_users_db[username]["is_admin"]:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã")

    deleted = db.query(models.Asset).delete()
    db.commit()

    return {"message": f"‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted} –∞–∫—Ç–∏–≤–æ–≤"}
